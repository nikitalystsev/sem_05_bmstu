def get_curr_cost(curr_route: list[int], mtr_adj: np.ndarray) -> int:
    curr_cost = 0

    for i in range(len(curr_route) - 1):
        curr_cost += mtr_adj[curr_route[i]][curr_route[i + 1]]

    return curr_cost


def brute_force_alg(mtr_adj: np.ndarray, size: int) -> tuple[list[int], int]:
    min_route = list()
    min_cost = float("inf")

    for perm in it.permutations(list(range(len(mtr_adj)))):
        curr_route = list(perm)

        curr_cost: int = get_curr_cost(curr_route, mtr_adj)

        if curr_cost < min_cost:
            min_route = curr_route
            min_cost = curr_cost

    return min_route, min_cost